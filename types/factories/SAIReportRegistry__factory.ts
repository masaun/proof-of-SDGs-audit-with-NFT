/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SAIReportRegistry } from "../SAIReportRegistry";

export class SAIReportRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): Promise<SAIReportRegistry> {
    return super.deploy(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    ) as Promise<SAIReportRegistry>;
  }
  getDeployTransaction(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    );
  }
  attach(address: string): SAIReportRegistry {
    return super.attach(address) as SAIReportRegistry;
  }
  connect(signer: Signer): SAIReportRegistry__factory {
    return super.connect(signer) as SAIReportRegistry__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SAIReportRegistry {
    return new Contract(address, _abi, signerOrProvider) as SAIReportRegistry;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "_proofOfAuditNFT",
        type: "address",
      },
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "auditor",
        type: "address",
      },
    ],
    name: "getSAIReport",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "organization",
            type: "address",
          },
          {
            internalType: "address",
            name: "auditor",
            type: "address",
          },
          {
            internalType: "enum DataTypes.TargetGoalInSDGs",
            name: "targetGoalInSDGs",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "contentHashOfSAIReport",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.SAIReport",
        name: "_saiReport",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSomething",
    outputs: [
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "organizations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofOfAuditNFT",
    outputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "_auditor",
        type: "address",
      },
      {
        internalType: "enum DataTypes.TargetGoalInSDGs",
        name: "_targetGoalInSDGs",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_contentHashOfSAIReport",
        type: "string",
      },
    ],
    name: "registerNewSAIReport",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b9438038062000b94833981016040819052620000349162000209565b600180546001600160a01b0319166001600160a01b038416179055604080518082019091526009815268536f6d657468696e6760b81b6020808301919091526200008a91908390620000a8811b6200041017901c565b80516200009f9060009060208401906200011a565b50505062000381565b620000f58282604051602401620000c192919062000312565b60408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b17909152620000f916565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054620001289062000344565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001f3578181015183820152602001620001d9565b8381111562000203576000848401525b50505050565b600080604083850312156200021d57600080fd5b82516001600160a01b03811681146200023557600080fd5b60208401519092506001600160401b03808211156200025357600080fd5b818501915085601f8301126200026857600080fd5b8151818111156200027d576200027d620001c0565b604051601f8201601f19908116603f01168101908382118183101715620002a857620002a8620001c0565b81604052828152886020848701011115620002c257600080fd5b620002d5836020830160208801620001d6565b80955050505050509250929050565b60008151808452620002fe816020860160208601620001d6565b601f01601f19169290920160200192915050565b604081526000620003276040830185620002e4565b82810360208401526200033b8185620002e4565b95945050505050565b600181811c908216806200035957607f821691505b602082108114156200037b57634e487b7160e01b600052602260045260246000fd5b50919050565b61080380620003916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ec3b6c1461005c57806358fa75fb1461007a578063735650381461009a5780639b508757146100af578063e792dd8a146100da575b600080fd5b6100646100ed565b6040516100719190610560565b60405180910390f35b61008d610088366004610596565b61017f565b60405161007191906105df565b6100ad6100a8366004610662565b6102b2565b005b6001546100c2906001600160a01b031681565b6040516001600160a01b039091168152602001610071565b6100c26100e836600461074b565b6103e6565b6060600080546100fc90610764565b80601f016020809104026020016040519081016040528092919081815260200182805461012890610764565b80156101755780601f1061014a57610100808354040283529160200191610175565b820191906000526020600020905b81548152906001019060200180831161015857829003601f168201915b5050505050905090565b6040805160808082018352600080835260208084018290528385018290526060808501526001600160a01b038781168352600382528583208782168452825285832086519485018752805482168552600181015491821692850192909252939491939091830190600160a01b900460ff166010811115610201576102016105c9565b6010811115610212576102126105c9565b815260200160028201805461022690610764565b80601f016020809104026020016040519081016040528092919081815260200182805461025290610764565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050509190925250919695505050505050565b6001600160a01b03808516600081815260036020908152604080832094881680845294909152902080546001600160a01b0319908116909217815560018101805492831684178155909285926001600160a81b03191617600160a01b836010811115610320576103206105c9565b0217905550815161033a906002830190602085019061047a565b5060028054600180820183556000929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0388811691821790925591546040516335313c2160e11b815260048101939093521690636a62784290602401600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b505050505050505050565b600281815481106103f657600080fd5b6000918252602090912001546001600160a01b0316905081565b610455828260405160240161042692919061079f565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610459565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82805461048690610764565b90600052602060002090601f0160209004810192826104a857600085556104ee565b82601f106104c157805160ff19168380011785556104ee565b828001600101855582156104ee579182015b828111156104ee5782518255916020019190600101906104d3565b506104fa9291506104fe565b5090565b5b808211156104fa57600081556001016104ff565b6000815180845260005b818110156105395760208185018101518683018201520161051d565b8181111561054b576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006105736020830184610513565b9392505050565b80356001600160a01b038116811461059157600080fd5b919050565b600080604083850312156105a957600080fd5b6105b28361057a565b91506105c06020840161057a565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60208152600060018060a01b038084511660208401528060208501511660408401525060408301516011811061062557634e487b7160e01b600052602160045260246000fd5b80606084015250606083015160808084015261064460a0840182610513565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561067857600080fd5b6106818561057a565b935061068f6020860161057a565b92506040850135601181106106a357600080fd5b9150606085013567ffffffffffffffff808211156106c057600080fd5b818701915087601f8301126106d457600080fd5b8135818111156106e6576106e661064c565b604051601f8201601f19908116603f0116810190838211818310171561070e5761070e61064c565b816040528281528a602084870101111561072757600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561075d57600080fd5b5035919050565b600181811c9082168061077857607f821691505b6020821081141561079957634e487b7160e01b600052602260045260246000fd5b50919050565b6040815260006107b26040830185610513565b82810360208401526107c48185610513565b9594505050505056fea2646970667358221220cc14a6aac0d928f0e121c70ac2441c0d31b9eaba9b8abde78707f2b54fb24f8464736f6c634300080a0033";
