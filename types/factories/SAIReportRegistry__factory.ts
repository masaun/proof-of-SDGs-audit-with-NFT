/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SAIReportRegistry } from "../SAIReportRegistry";

export class SAIReportRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): Promise<SAIReportRegistry> {
    return super.deploy(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    ) as Promise<SAIReportRegistry>;
  }
  getDeployTransaction(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    );
  }
  attach(address: string): SAIReportRegistry {
    return super.attach(address) as SAIReportRegistry;
  }
  connect(signer: Signer): SAIReportRegistry__factory {
    return super.connect(signer) as SAIReportRegistry__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SAIReportRegistry {
    return new Contract(address, _abi, signerOrProvider) as SAIReportRegistry;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "_proofOfAuditNFT",
        type: "address",
      },
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "auditor",
        type: "address",
      },
    ],
    name: "getSAIReport",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "organization",
            type: "address",
          },
          {
            internalType: "address",
            name: "auditor",
            type: "address",
          },
          {
            internalType: "enum DataTypes.TargetGoalInSDGs",
            name: "targetGoalInSDGs",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "contentHashOfSAIReport",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.SAIReport",
        name: "_saiReport",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSomething",
    outputs: [
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "organizations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofOfAuditNFT",
    outputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "_auditor",
        type: "address",
      },
      {
        internalType: "enum DataTypes.TargetGoalInSDGs",
        name: "_targetGoalInSDGs",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_contentHashOfSAIReport",
        type: "string",
      },
    ],
    name: "registerNewSAIReport",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620009e1380380620009e1833981016040819052620000349162000129565b600180546001600160a01b0319166001600160a01b0384161790558051620000649060009060208401906200006d565b50505062000266565b8280546200007b9062000229565b90600052602060002090601f0160209004810192826200009f5760008555620000ea565b82601f10620000ba57805160ff1916838001178555620000ea565b82800160010185558215620000ea579182015b82811115620000ea578251825591602001919060010190620000cd565b50620000f8929150620000fc565b5090565b5b80821115620000f85760008155600101620000fd565b634e487b7160e01b600052604160045260246000fd5b600080604083850312156200013d57600080fd5b82516001600160a01b03811681146200015557600080fd5b602084810151919350906001600160401b03808211156200017557600080fd5b818601915086601f8301126200018a57600080fd5b8151818111156200019f576200019f62000113565b604051601f8201601f19908116603f01168101908382118183101715620001ca57620001ca62000113565b816040528281528986848701011115620001e357600080fd5b600093505b82841015620002075784840186015181850187015292850192620001e8565b82841115620002195760008684830101525b8096505050505050509250929050565b600181811c908216806200023e57607f821691505b602082108114156200026057634e487b7160e01b600052602260045260246000fd5b50919050565b61076b80620002766000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ec3b6c1461005c57806358fa75fb1461007a578063735650381461009a5780639b508757146100af578063e792dd8a146100da575b600080fd5b6100646100ed565b60405161007191906104f6565b60405180910390f35b61008d61008836600461052c565b61017f565b6040516100719190610575565b6100ad6100a83660046105f8565b6102b2565b005b6001546100c2906001600160a01b031681565b6040516001600160a01b039091168152602001610071565b6100c26100e83660046106e1565b6103e6565b6060600080546100fc906106fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610128906106fa565b80156101755780601f1061014a57610100808354040283529160200191610175565b820191906000526020600020905b81548152906001019060200180831161015857829003601f168201915b5050505050905090565b6040805160808082018352600080835260208084018290528385018290526060808501526001600160a01b038781168352600382528583208782168452825285832086519485018752805482168552600181015491821692850192909252939491939091830190600160a01b900460ff1660108111156102015761020161055f565b60108111156102125761021261055f565b8152602001600282018054610226906106fa565b80601f0160208091040260200160405190810160405280929190818152602001828054610252906106fa565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050509190925250919695505050505050565b6001600160a01b03808516600081815260036020908152604080832094881680845294909152902080546001600160a01b0319908116909217815560018101805492831684178155909285926001600160a81b03191617600160a01b8360108111156103205761032061055f565b0217905550815161033a9060028301906020850190610410565b5060028054600180820183556000929092527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b0388811691821790925591546040516335313c2160e11b815260048101939093521690636a62784290602401600060405180830381600087803b1580156103c757600080fd5b505af11580156103db573d6000803e3d6000fd5b505050505050505050565b600281815481106103f657600080fd5b6000918252602090912001546001600160a01b0316905081565b82805461041c906106fa565b90600052602060002090601f01602090048101928261043e5760008555610484565b82601f1061045757805160ff1916838001178555610484565b82800160010185558215610484579182015b82811115610484578251825591602001919060010190610469565b50610490929150610494565b5090565b5b808211156104905760008155600101610495565b6000815180845260005b818110156104cf576020818501810151868301820152016104b3565b818111156104e1576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061050960208301846104a9565b9392505050565b80356001600160a01b038116811461052757600080fd5b919050565b6000806040838503121561053f57600080fd5b61054883610510565b915061055660208401610510565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151601181106105bb57634e487b7160e01b600052602160045260246000fd5b8060608401525060608301516080808401526105da60a08401826104a9565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561060e57600080fd5b61061785610510565b935061062560208601610510565b925060408501356011811061063957600080fd5b9150606085013567ffffffffffffffff8082111561065657600080fd5b818701915087601f83011261066a57600080fd5b81358181111561067c5761067c6105e2565b604051601f8201601f19908116603f011681019083821181831017156106a4576106a46105e2565b816040528281528a60208487010111156106bd57600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000602082840312156106f357600080fd5b5035919050565b600181811c9082168061070e57607f821691505b6020821081141561072f57634e487b7160e01b600052602260045260246000fd5b5091905056fea26469706673582212203944b4a6e43e1f562b1ab071508612f1550e71b4825fb33b4339fe5abbda22ab64736f6c634300080a0033";
