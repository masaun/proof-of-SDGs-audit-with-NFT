/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { SAIReportRegistry } from "../SAIReportRegistry";

export class SAIReportRegistry__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): Promise<SAIReportRegistry> {
    return super.deploy(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    ) as Promise<SAIReportRegistry>;
  }
  getDeployTransaction(
    _proofOfAuditNFT: string,
    _something: string,
    overrides?: Overrides
  ): TransactionRequest {
    return super.getDeployTransaction(
      _proofOfAuditNFT,
      _something,
      overrides || {}
    );
  }
  attach(address: string): SAIReportRegistry {
    return super.attach(address) as SAIReportRegistry;
  }
  connect(signer: Signer): SAIReportRegistry__factory {
    return super.connect(signer) as SAIReportRegistry__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SAIReportRegistry {
    return new Contract(address, _abi, signerOrProvider) as SAIReportRegistry;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "_proofOfAuditNFT",
        type: "address",
      },
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "auditor",
        type: "address",
      },
    ],
    name: "getSAIReport",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "organization",
            type: "address",
          },
          {
            internalType: "address",
            name: "auditor",
            type: "address",
          },
          {
            internalType: "enum DataTypes.TargetGoalInSDGs",
            name: "targetGoalInSDGs",
            type: "uint8",
          },
          {
            internalType: "string",
            name: "contentHashOfSAIReport",
            type: "string",
          },
        ],
        internalType: "struct DataTypes.SAIReport",
        name: "_saiReport",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getSomething",
    outputs: [
      {
        internalType: "string",
        name: "_something",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "organizations",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proofOfAuditNFT",
    outputs: [
      {
        internalType: "contract ProofOfAuditNFT",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_organization",
        type: "address",
      },
      {
        internalType: "address",
        name: "_auditor",
        type: "address",
      },
      {
        internalType: "enum DataTypes.TargetGoalInSDGs",
        name: "_targetGoalInSDGs",
        type: "uint8",
      },
      {
        internalType: "string",
        name: "_contentHashOfSAIReport",
        type: "string",
      },
    ],
    name: "registerNewSAIReport",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162000b4038038062000b40833981016040819052620000349162000209565b600180546001600160a01b0319166001600160a01b038416179055604080518082019091526009815268536f6d657468696e6760b81b6020808301919091526200008a91908390620000a8811b620003bc17901c565b80516200009f9060009060208401906200011a565b50505062000381565b620000f58282604051602401620000c192919062000312565b60408051601f198184030181529190526020810180516001600160e01b03908116634b5c427760e01b17909152620000f916565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b828054620001289062000344565b90600052602060002090601f0160209004810192826200014c576000855562000197565b82601f106200016757805160ff191683800117855562000197565b8280016001018555821562000197579182015b82811115620001975782518255916020019190600101906200017a565b50620001a5929150620001a9565b5090565b5b80821115620001a55760008155600101620001aa565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001f3578181015183820152602001620001d9565b8381111562000203576000848401525b50505050565b600080604083850312156200021d57600080fd5b82516001600160a01b03811681146200023557600080fd5b60208401519092506001600160401b03808211156200025357600080fd5b818501915085601f8301126200026857600080fd5b8151818111156200027d576200027d620001c0565b604051601f8201601f19908116603f01168101908382118183101715620002a857620002a8620001c0565b81604052828152886020848701011115620002c257600080fd5b620002d5836020830160208801620001d6565b80955050505050509250929050565b60008151808452620002fe816020860160208601620001d6565b601f01601f19169290920160200192915050565b604081526000620003276040830185620002e4565b82810360208401526200033b8185620002e4565b95945050505050565b600181811c908216806200035957607f821691505b602082108114156200037b57634e487b7160e01b600052602260045260246000fd5b50919050565b6107af80620003916000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806301ec3b6c1461005c57806358fa75fb1461007a578063735650381461009a5780639b508757146100af578063e792dd8a146100da575b600080fd5b6100646100ed565b604051610071919061050c565b60405180910390f35b61008d610088366004610542565b61017f565b604051610071919061058b565b6100ad6100a836600461060e565b6102b2565b005b6001546100c2906001600160a01b031681565b6040516001600160a01b039091168152602001610071565b6100c26100e83660046106f7565b610392565b6060600080546100fc90610710565b80601f016020809104026020016040519081016040528092919081815260200182805461012890610710565b80156101755780601f1061014a57610100808354040283529160200191610175565b820191906000526020600020905b81548152906001019060200180831161015857829003601f168201915b5050505050905090565b6040805160808082018352600080835260208084018290528385018290526060808501526001600160a01b038781168352600382528583208782168452825285832086519485018752805482168552600181015491821692850192909252939491939091830190600160a01b900460ff16601081111561020157610201610575565b601081111561021257610212610575565b815260200160028201805461022690610710565b80601f016020809104026020016040519081016040528092919081815260200182805461025290610710565b801561029f5780601f106102745761010080835404028352916020019161029f565b820191906000526020600020905b81548152906001019060200180831161028257829003601f168201915b5050509190925250919695505050505050565b6001600160a01b03808516600081815260036020908152604080832094881680845294909152902080546001600160a01b0319908116909217815560018101805492831684178155909285926001600160a81b03191617600160a01b83601081111561032057610320610575565b0217905550815161033a9060028301906020850190610426565b5050600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace0180546001600160a01b0319166001600160a01b039590951694909417909355505050565b600281815481106103a257600080fd5b6000918252602090912001546001600160a01b0316905081565b61040182826040516024016103d292919061074b565b60408051601f198184030181529190526020810180516001600160e01b0316634b5c427760e01b179052610405565b5050565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b82805461043290610710565b90600052602060002090601f016020900481019282610454576000855561049a565b82601f1061046d57805160ff191683800117855561049a565b8280016001018555821561049a579182015b8281111561049a57825182559160200191906001019061047f565b506104a69291506104aa565b5090565b5b808211156104a657600081556001016104ab565b6000815180845260005b818110156104e5576020818501810151868301820152016104c9565b818111156104f7576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061051f60208301846104bf565b9392505050565b80356001600160a01b038116811461053d57600080fd5b919050565b6000806040838503121561055557600080fd5b61055e83610526565b915061056c60208401610526565b90509250929050565b634e487b7160e01b600052602160045260246000fd5b60208152600060018060a01b03808451166020840152806020850151166040840152506040830151601181106105d157634e487b7160e01b600052602160045260246000fd5b8060608401525060608301516080808401526105f060a08401826104bf565b949350505050565b634e487b7160e01b600052604160045260246000fd5b6000806000806080858703121561062457600080fd5b61062d85610526565b935061063b60208601610526565b925060408501356011811061064f57600080fd5b9150606085013567ffffffffffffffff8082111561066c57600080fd5b818701915087601f83011261068057600080fd5b813581811115610692576106926105f8565b604051601f8201601f19908116603f011681019083821181831017156106ba576106ba6105f8565b816040528281528a60208487010111156106d357600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b60006020828403121561070957600080fd5b5035919050565b600181811c9082168061072457607f821691505b6020821081141561074557634e487b7160e01b600052602260045260246000fd5b50919050565b60408152600061075e60408301856104bf565b828103602084015261077081856104bf565b9594505050505056fea2646970667358221220f122689c2488350a6b5461a58f14cb51a7e8c0c90480b14742110b5589c2164564736f6c634300080a0033";
